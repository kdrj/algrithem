Java集合：HashMap和ConcurrentHashMap，平时最好有读一些源码，最好知道每个参数为什么设置成这么大？有什么好处？
JUC包肯定要学，即使平时的编程根本不用，也必须得会。至少要知道aba，cas，aqs，unsafe，volatile，sync，
以及常见的各种lock，死锁，线程池参数等，也必须要明白自旋，阻塞，死锁和它如何去定位，oom如何定位问题，cpu过高如何定位等基本的操作，
你可以没有生产调试经验，但不代表你可以不会top，jps，jstack，jmap这些可能会问的东西。以及可能衍生的jmm模型和mesi协议等。
大厂必问JVM：垃圾回收算法，垃圾收集器、JVM内存模型，每个区域用途，各种oom的种类，jvm调优经验，类加载过程，双亲委派等。
Spring就得抽空看源码了，一般会问到bean的生命周期，如何解决循环依赖，实现事务原理，动态代理原理等。
Dubbo也是必须问的，设计框架，负载均衡。
Redis更要多懂一点，单线程模型，aof，rdb，rewrite，主从，cluster，哪些类型？包含一些缓存常见的问题击穿、穿透、雪崩、数据一致性等。
Mysql，事务，锁，索引，b+树，主从这些你必须会
Mq ，我用的rocketmq，你得知道为什么用，重复消费，顺序消息，事务消息，高可用，消息丢失，挤压场景，整个消息发送消费的流程，读过源码更佳，更好吹
Netty的话，零拷贝，bio，nio，aio，架构设计怎么样子的？用过看过更好
算法，建议去刷题，我运气好，简单的算法让我碰到了，一些快排，堆排，二叉树相关的，链表反转，成环，环节点，跳楼梯等常规的简单算法建议刷刷，
双指针，dp，递归这些还是多找找感觉，大数据内存有限的场景的统计，有时间一些middle可以去试试，手写红黑树你要是可以，那我估计算法你稳了。
网络，http，tcp，https，udp，7层网络协议等，最好结合自己理解，背，你都要背下来。
还有就是一些分布式事务实现，架构实现，比如抢红包，高并发下单等常规的场景设计，你来设计，你怎么去设计？
多找一些大牛或者上网自己查，帮你看看有哪些漏洞，有那些解决方案？业界有哪些好的中间件？
