java内存模型

每一条正在运行的线程都有自己的线程栈。线程栈包含了线程调用了什么方法来到达执行点的信息，
我称之为"调用堆栈"。当线程执行其代码，调用堆栈会改变。
线程栈包含每个方法的所有本地变量。线程只能访问自己的栈。
线程创建的局部变量对创建它的线程以外的所有其他线程都不可见。
即便是两个线程在执行相同的代码，两个线程将在自己栈产生局部变量。
每个线程都有自己局部变量的版本。
所有的基本数据类型的局部变量(byte,short,int,long,double,float,boolean,char)
都存储在栈里，对其他线程不可见。
一个线程可以将基本类型局部变量的副本快递给另一个线程，但他不能共享基本局部变量。


java垃圾回收

与C/C++相比，java语言不需要程序员直接控制内存回收，java程序的内存分配和回收都是由JRE在后台自动进行，JRE会负责回收那些不再使用的内存，这种机制被称为垃圾回收机制(Garbage Collection,GC)：

1.发现无用的对象；

2.回收被无用对象占用的内存空间，使之再次被程序使用(一般是在CPU空闲或者内存不足时)。

二、特点

1.垃圾回收机制的工作目标是回收无用对象的内存空间，这些内存空间都是jvm堆内存（运行时数据区，用以保存类的实例，即对象）里的内存空间，不包含其它物力资源，比如数据库连接、磁盘I/O等；

2.Java语言没有显式的提供分配内存和删除内存的方法，一些开发人员将引用对象设置为null或者调用System.gc()或者Runtime.getRuntime.gc()来释放内存(后两种方法仅是建议，慎重使用)；

3.垃圾回收不可预知，不同的jvm采用不同的垃圾回收机制和算法，有可能定时发生，有可能CPU空闲时发生，也有可能内存耗尽时发生(下面说下最为熟知的分代垃圾回收)；

三、分代垃圾回收（资料来自http://www.cnblogs.com/yaoyuan23/p/5587548.html）

1.年轻代（Young Generation）:

所有新生成的对象首先都是放在年轻代的。年轻代的目标就是尽可能快速的收集掉那些生命周期短的对象。年轻代分三个区。一个Eden区，两个Survivor区(一般而言)。大部分对象在Eden区中生成。当Eden区满时，还存活的对象将被复制到Survivor区（两个中的一个）（YGC，年轻代垃圾回收），当这个Survivor区满时，此区的存活对象将被复制到另外一个Survivor区，当这个Survivor去也满了的时候，从第一个Survivor区复制过来的并且此时还存活的对象，将被复制“年老区(Tenured)”。需要注意，Survivor的两个区是对称的，没先后关系，所以同一个区中可能同时存在从Eden复制过来 对象，和从前一个Survivor复制过来的对象，而复制到年老区的只有从第一个Survivor去过来的对象。而且，Survivor区总有一个是空的。同时，根据程序需要，Survivor区是可以配置为多个的（多于两个），这样可以增加对象在年轻代中的存在时间，减少被放到年老代的可能。

2.年老代（Old Generation）:

在年轻代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代中。因此，可以认为年老代中存放的都是一些生命周期较长的对象。

3.持久代（Permanent Generation）:

用于存放静态文件，如今Java类、方法等。持久代对垃圾回收没有显著影响，但是有些应用可能动态生成或者调用一些class，例如Hibernate等，在这种时候需要设置一个比较大的持久代空间来存放这些运行过程中新增的类。持久代大小通过-XX:MaxPermSize=<N>进行设置。

4.什么情况下触发垃圾回收

由于对象进行了分代处理，因此垃圾回收区域、时间也不一样。GC有两种类型：Minor GC和Full GC。

Minor GC

一般情况下，当新对象生成，并且在Eden申请空间失败时，就会触发Minor GC，对Eden区域进行GC，清除非存活对象，并且把尚且存活的对象移动到Survivor区。然后整理Survivor的两个区。这种方式的GC是对年轻代的Eden区进行，不会影响到年老代。因为大部分对象都是从Eden区开始的，同时Eden区不会分配的很大，所以Eden区的GC会频繁进行。因而，一般在这里需要使用速度快、效率高的算法，使Eden去能尽快空闲出来。

Full GC

对整个堆进行整理，包括Young、Tenured和Perm。Full GC因为需要对整个对进行回收，所以比Full GC要慢，因此应该尽可能减少Full GC的次数。在对JVM调优的过程中，很大一部分工作就是对于Full GC的调节。有如下原因可能导致Full GC：

 年老代（Tenured）被写满

持久代（Perm）被写满

System.gc()被显示调用

上一次GC之后Heap的各域分配策略动态变化
