索引是帮助MySQL高效获取数据的数据结构。

当表中的数据量越来越大时,可以明显的提高查询效率。

1.索引的分类
1、从存储结构上来划分：
    BTree索引（B-Tree或B+Tree索引）
    Hash索引，full-index全文索引
    R-Tree索引

2、从应用层次来分：
    普通索引
    唯一索引
    复合索引

3、根据中数据的物理顺序与键值的逻辑（索引）顺序关系：
   聚集索引
   非聚集索引
   
 
  普通索引：即一个索引只包含单个列，一个表可以有多个单列索引
  唯一索引：索引列的值必须唯一，但允许有空值
  复合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并
  聚簇索引(聚集索引)：并不是一种单独的索引类型，而是一种数据存储方式。具体细节取决于不同的实现，
  InnoDB的聚簇索引其实就是在同一个结构中保存了B-Tree索引(技术上来说是B+Tree)和数据行。
  非聚簇索引：不是聚簇索引，就是非聚簇索引


https://www.cnblogs.com/zsh-blogs/p/10988726.html


索引设计的原则

适合索引的列是出现在where子句中的列，或者连接子句中指定的列；

基数较小的类，索引效果较差，没有必要在此列建立索引；

使用短索引，如果对长字符串列进行索引，应该指定一个前缀长度，这样能够节省大量索引空间；

不要过度索引。索引需要额外的磁盘空间，并降低写操作的性能。在修改表内容的时候，索引会进行更新甚至重构，
索引列越多，这个时间就会越长。所以只保持需要的索引有利于查询即可。

1、索引相关的重要概念

基数  ---列中重复的值越大，基数越大
SELECT COUNT(DISTINCT name),COUNT(DISTINCT gender) FROM user;

回表   ---当对一个列创建索引之后，索引会包含该列的键值及键值对应行所在的rowid。通过索引中记录的rowid访问表中的数据就叫回表。

回表次数太多会严重影响SQL性能，如果回表次数太多，就不应该走索引扫描，应该直接走全表扫描。
EXPLAIN命令结果中的Using Index意味着不会回表，通过索引就可以获得主要的数据。Using Where则意味着需要回表取数据。
