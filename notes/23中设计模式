1：单例模式
   (1)饿汉式(线程安全，调用效率高，但不能延时加载)
      public class Singleton1{
           private static Singleton1 instance=new Singleton1();
           private Singleton1(){}
           public static Singleton1 getInstance(){
                   return instance;
           }
      }
      缺点：一开始就初始化单例对象，如果程序中没有用到会造成不必要的浪费
     (2)懒汉式(线程安全，调用效率高，延时加载)
        public class Singleton2{
              private static Singleton2 instance;
              private Singleton2(){}
              private static synchronized Singleton2(){
                     if(instance==null){
                         instance=new Singleton2()
                      }
                      return instance;
              }
        }
        (3)静态内部类实现模式(线程安全，调用效率高，可以延时加载)
          public class Singleton3{
              public static class SingleInstance{
                    public static final Singleton3 instance=new Singleton3()
              }
              private Singleton3(){}
              public static Singleton3 getinstance(){
                    return SingleInstance.instance;
              }
          }
        (4)枚举类(线程安全，调用效率高，不能延时加载，可以天然的防止反射和反序列化)
           public enum Singleton4{
               INSTANCE;
               public void singletonOperation(){
               }
           }
           
           如何选用:
                   单例对象，占用资源小，不需要延时加载，枚举好于饿汉
                   单例对象，占用资源多，需要延时加载，静态内部类好于懒汉式
