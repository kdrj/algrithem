代理模式中涉及到的角色
  1.抽象角色
  2.代理角色
  3.真实角色
 
 
 
 静态代理
 1.定义抽象角色
 
    public interface Producer {
    void sell();
    }
 
 2.定义一个真实角色
 
    public class Canteen implements Producer {
      @Override
      public void sell() {
          System.out.println("小卖部进行卖货");
       }
    }
    
 3.定义一个代理类和测试类
    public class ProducerProxy implements Producer {
      private Producer producer;

      ProducerProxy(Producer producer) {
          this.producer = producer;
      }

      @Override
      public void sell() {
          System.out.println("--------小卖部卖货前--------");
          producer.sell();
          System.out.println("--------小卖部卖货后--------");
      }
   }
   class StaticProxyTest {
       public static void main(String[] args) {
           Producer producer = new Canteen();
           ProducerProxy personProxy = new ProducerProxy(producer);
           personProxy.sell();
       }
   }
   
 动态代理
 
 1.定义抽象角色
   public interface Producer {
      void sell();
   }
 2.定义一个真实角色
   public class Canteen implements Producer {
      @Override
      public void sell() {
          System.out.println("小卖部进行卖货");
      }
   }
 3.实现代理
   public class Producer2Proxy {
      public static void main(String[] args) {
          Producer2 producer2 = new Canteen2();
          Producer2 producerProxy = (Producer2) Proxy.newProxyInstance(producer2.getClass().getClassLoader(),
                producer2.getClass().getInterfaces(), (proxy, method, args1) -> {
                    System.out.println("----------小卖部卖货前--------");
                    Object invoke = method.invoke(producer2,args1);
                    System.out.println("----------小卖部卖货后--------");
                    return invoke;
                });
          producerProxy.sell();
      }
   }
   
CGLib代理

1.引入依赖(Spring环境下不需要，因为Spring-Core里已经引入了)
<dependency>
    <groupId>cglib</groupId>
    <artifactId>cglib</artifactId>
    <version>3.2.12</version>
</dependency>

1.创建一个目标类
  public class Canteen {
    public void sell() {
        System.out.println("小卖部进行卖货");
    }
  }
2.创建CGLib的工厂类和测试类
  public class CgLibProxy implements MethodInterceptor {
    private Canteen canteen;

    CgLibProxy(Canteen canteen) {
        this.canteen = canteen;
    }

    Canteen proxy() {
        // 创建Enhancer对象
        Enhancer enhancer = new Enhancer();
        // 设置代理的目标类
        enhancer.setSuperclass(Canteen.class);
        // 设置回调方法, this代表是当前类, 因为当前类实现了CallBack
        enhancer.setCallback(this);
        return (Canteen) enhancer.create();
    }

    //这个方法就是回调方法了
    @Override
    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {
        System.out.println("----------小卖部卖货前----------");
        Object invoke = method.invoke(canteen, objects);
        System.out.println("----------小卖部卖货后----------");
        return invoke;
    }
}

class TestCglibProxy{
    public static void main(String[] args) {
        Canteen canteen = new Canteen();
        Canteen proxy = new CgLibProxy(canteen).proxy();
        proxy.sell();
    }
}


三种代理方式的优缺点

1、静态代理：
可以做到在不修改目标对象的功能前提下,对目标功能扩展

缺点：

代理对象需要与目标对象实现一样的接口,所以会有很多代理类,类太多.同时,一旦接口增加方法,目标对象与代理对象都要维护

2、JDK动态代理
代理对象不需要实现接口, 利用JDK的API,动态的在内存中构建代理对象(需要我们指定创建代理对象/目标对象实现的接口的类型)

缺点：

目标对象一定要实现接口,否则不能用动态代理

3、CGLib代理
静态代理和动态代理模式都是要求目标对象是实现一个接口的目标对象,但是有时候目标对象只是一个单独的对象,并没有实现任何的接口,
这个时候就可以使用以目标对象类实现代理

什么时候使用代理模式
1、当我们想要隐藏某个类时，可以为其提供代理。

2、当一个类需要对不同的调用者提供不同的调用权限时，可以使用代理类来实现（代理类不一定只有一个，我们可以建立多个代理类来实现，
也可以在一个代理类中进行权限判断来进行不同权限的功能调用）。

3、当我们要扩展某个类的某个功能时，可以使用代理模式，在代理类中进行简单扩展（只针对简单扩展，可在引用委托类的语句之前与之后进行）。
